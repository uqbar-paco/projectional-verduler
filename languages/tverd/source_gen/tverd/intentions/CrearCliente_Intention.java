package tverd.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class CrearCliente_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public CrearCliente_Intention() {
  }
  public String getConcept() {
    return "tverd.structure.Compra";
  }
  public String getPresentation() {
    return "CrearCliente";
  }
  public String getPersistentStateKey() {
    return "tverd.intentions.CrearCliente_Intention";
  }
  public String getLanguageFqName() {
    return "tverd";
  }
  public IntentionType getType() {
    return IntentionType.ERROR;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return editorContext.getSelectedCell().isErrorState() && editorContext.getSelectedCell().getCellId().equals("empty_cliente");
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:f1c65996-a0ec-4125-a4f2-0196b8b1f6d2(tverd.intentions)", "8295061481379764809");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new CrearCliente_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Declarar que conozco a " + editorContext.getSelectedCell().renderText().getText();
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode cliente = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1f73cc9c8de4b2fL, 0xa1ea262f9788b306L, 0x731dfa77db9f648aL, "tverd.structure.Cliente")), null);
      SPropertyOperations.set(cliente, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), editorContext.getSelectedCell().renderText().getText());
      ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0x1f73cc9c8de4b2fL, 0xa1ea262f9788b306L, 0x731dfa77db9eb5f7L, "tverd.structure.Balance"), true, false), MetaAdapterFactory.getContainmentLink(0x1f73cc9c8de4b2fL, 0xa1ea262f9788b306L, 0x731dfa77db9eb5f7L, 0x731dfa77dba64532L, "clientes"))).addElement(cliente);
      editorContext.select(node);
    }
    public IntentionDescriptor getDescriptor() {
      return CrearCliente_Intention.this;
    }
  }
}
